// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace TaffySharp.Lib
{
    public static unsafe partial class NativeMethods
    {
        const string __DllName = "taffy_ffi";



        [DllImport(__DllName, EntryPoint = "taffy_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern TaffyTree* taffy_new();

        [DllImport(__DllName, EntryPoint = "taffy_new_with_children", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong taffy_new_with_children(TaffyTree* tree, c_Style* style, ulong* children, nuint children_len);

        [DllImport(__DllName, EntryPoint = "taffy_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void taffy_free(TaffyTree* tree);

        [DllImport(__DllName, EntryPoint = "taffy_enable_rounding", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void taffy_enable_rounding(TaffyTree* tree);

        [DllImport(__DllName, EntryPoint = "taffy_disable_rounding", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void taffy_disable_rounding(TaffyTree* tree);

        [DllImport(__DllName, EntryPoint = "taffy_node_create", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong taffy_node_create(TaffyTree* tree, c_Style* style);

        [DllImport(__DllName, EntryPoint = "taffy_node_add_child", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int taffy_node_add_child(TaffyTree* tree, ulong parent, ulong child);

        [DllImport(__DllName, EntryPoint = "taffy_node_drop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int taffy_node_drop(TaffyTree* tree, ulong node);

        [DllImport(__DllName, EntryPoint = "taffy_node_drop_all", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void taffy_node_drop_all(TaffyTree* tree);

        [DllImport(__DllName, EntryPoint = "taffy_node_replace_child_at_index", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int taffy_node_replace_child_at_index(TaffyTree* tree, ulong parent, nuint index, ulong child);

        [DllImport(__DllName, EntryPoint = "taffy_node_remove_child", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int taffy_node_remove_child(TaffyTree* tree, ulong parent, ulong child);

        [DllImport(__DllName, EntryPoint = "taffy_node_remove_child_at_index", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int taffy_node_remove_child_at_index(TaffyTree* tree, ulong parent, nuint index);

        [DllImport(__DllName, EntryPoint = "taffy_node_dirty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int taffy_node_dirty(TaffyTree* tree, ulong node);

        [DllImport(__DllName, EntryPoint = "taffy_node_mark_dirty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int taffy_node_mark_dirty(TaffyTree* tree, ulong node);

        [DllImport(__DllName, EntryPoint = "taffy_node_set_style", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int taffy_node_set_style(TaffyTree* tree, ulong node, c_Style* style);

        [DllImport(__DllName, EntryPoint = "taffy_node_set_measure", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int taffy_node_set_measure(TaffyTree* tree, ulong node, int measure);

        [DllImport(__DllName, EntryPoint = "taffy_compute_layout", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int taffy_compute_layout(TaffyTree* tree, ulong node, c_Size available_space);

        [DllImport(__DllName, EntryPoint = "taffy_get_layout", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int taffy_get_layout(TaffyTree* tree, ulong node, c_Layout* layout);


    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct c_Length
    {
        public int dim;
        public float value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct c_Size
    {
        public c_Length width;
        public c_Length height;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct c_Rect
    {
        public c_Length left;
        public c_Length right;
        public c_Length top;
        public c_Length bottom;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct c_GridIndex
    {
        public sbyte kind;
        public short value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct c_GridPlacement
    {
        public c_GridIndex start;
        public c_GridIndex end;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct c_GridTrackSize
    {
        public c_Length min_size;
        public c_Length max_size;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct c_GridTrackSizing
    {
        public int repetition;
        public c_GridTrackSize* single;
        public c_GridTrackSize* repeat;
        public nuint repeat_count;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct c_Style
    {
        public int display;
        public int box_sizing;
        public int overflow_x;
        public int overflow_y;
        public float scrollbar_width;
        public int position;
        public c_Rect inset;
        public c_Size gap;
        public c_Rect margin;
        public c_Rect border;
        public c_Rect padding;
        public c_Size size;
        public c_Size min_size;
        public c_Size max_size;
        public int flex_wrap;
        public int flex_direction;
        public float flex_grow;
        public float flex_shrink;
        public c_Length flex_basis;
        public c_GridTrackSizing* grid_template_rows;
        public nuint grid_template_rows_count;
        public c_GridTrackSizing* grid_template_columns;
        public nuint grid_template_columns_count;
        public c_GridTrackSize* grid_auto_rows;
        public nuint grid_auto_rows_count;
        public c_GridTrackSize* grid_auto_columns;
        public nuint grid_auto_columns_count;
        public int grid_auto_flow;
        public c_GridPlacement grid_row;
        public c_GridPlacement grid_column;
        public float aspect_ratio;
        public int has_aspect_ratio;
        public int align_items;
        public int has_align_items;
        public int justify_items;
        public int has_justify_items;
        public int align_self;
        public int has_align_self;
        public int justify_self;
        public int has_justify_self;
        public int align_content;
        public int has_align_content;
        public int justify_content;
        public int has_justify_content;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct c_Layout
    {
        public long order;
        public fixed float location[2];
        public fixed float size[2];
        public fixed float content_size[2];
        public fixed float scrollbar_size[2];
        public fixed float border[4];
        public fixed float padding[4];
        public fixed float margin[4];
    }



}
